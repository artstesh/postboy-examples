/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { TimeApiConfiguration } from '../time-api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiConversionConverttimezonePost } from '../fn/conversion/api-conversion-converttimezone-post';
import { ApiConversionConverttimezonePost$Params } from '../fn/conversion/api-conversion-converttimezone-post';
import { apiConversionDayoftheweekDateGet } from '../fn/conversion/api-conversion-dayoftheweek-date-get';
import { ApiConversionDayoftheweekDateGet$Params } from '../fn/conversion/api-conversion-dayoftheweek-date-get';
import { apiConversionDayoftheyearDateGet } from '../fn/conversion/api-conversion-dayoftheyear-date-get';
import { ApiConversionDayoftheyearDateGet$Params } from '../fn/conversion/api-conversion-dayoftheyear-date-get';
import { apiConversionTranslatePost } from '../fn/conversion/api-conversion-translate-post';
import { ApiConversionTranslatePost$Params } from '../fn/conversion/api-conversion-translate-post';
import { Conversion } from '../models/conversion';
import { DayOfTheWeekResult } from '../models/day-of-the-week-result';
import { Translation } from '../models/translation';

@Injectable({ providedIn: 'root' })
export class ConversionService extends BaseService {
  constructor(config: TimeApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiConversionConverttimezonePost()` */
  static readonly ApiConversionConverttimezonePostPath = '/api/conversion/converttimezone';

  /**
   * Allows you to convert the time in a timezone to the time in another timezone.
   *
   * Sample request:
   *             
   *     POST /Conversion/ConvertTimeZone
   *     {
   *         "fromTimeZone": "Europe/Amsterdam",
   *         "dateTime": "2021-03-14 17:45:00",
   *         "toTimeZone": "America/Los_Angeles",
   *         "dstAmbiguity": ""
   *     }
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiConversionConverttimezonePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiConversionConverttimezonePost$Response(params?: ApiConversionConverttimezonePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Conversion>> {
    return apiConversionConverttimezonePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Allows you to convert the time in a timezone to the time in another timezone.
   *
   * Sample request:
   *             
   *     POST /Conversion/ConvertTimeZone
   *     {
   *         "fromTimeZone": "Europe/Amsterdam",
   *         "dateTime": "2021-03-14 17:45:00",
   *         "toTimeZone": "America/Los_Angeles",
   *         "dstAmbiguity": ""
   *     }
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiConversionConverttimezonePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiConversionConverttimezonePost(params?: ApiConversionConverttimezonePost$Params, context?: HttpContext): Observable<Conversion> {
    return this.apiConversionConverttimezonePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Conversion>): Conversion => r.body)
    );
  }

  /** Path part for operation `apiConversionTranslatePost()` */
  static readonly ApiConversionTranslatePostPath = '/api/conversion/translate';

  /**
   * Converts a date time into a language translated friendly date time string.
   *
   * Sample request:
   *             
   *     POST /Conversion/Translate
   *     {
   *         "dateTime" : "2021-03-14 17:45:00",
   *         "languageCode" : "de"
   *     }
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiConversionTranslatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiConversionTranslatePost$Response(params?: ApiConversionTranslatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Translation>> {
    return apiConversionTranslatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Converts a date time into a language translated friendly date time string.
   *
   * Sample request:
   *             
   *     POST /Conversion/Translate
   *     {
   *         "dateTime" : "2021-03-14 17:45:00",
   *         "languageCode" : "de"
   *     }
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiConversionTranslatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiConversionTranslatePost(params?: ApiConversionTranslatePost$Params, context?: HttpContext): Observable<Translation> {
    return this.apiConversionTranslatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Translation>): Translation => r.body)
    );
  }

  /** Path part for operation `apiConversionDayoftheweekDateGet()` */
  static readonly ApiConversionDayoftheweekDateGetPath = '/api/conversion/dayoftheweek/{date}';

  /**
   * Convert a date to the day of the week.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiConversionDayoftheweekDateGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiConversionDayoftheweekDateGet$Response(params: ApiConversionDayoftheweekDateGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DayOfTheWeekResult>> {
    return apiConversionDayoftheweekDateGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Convert a date to the day of the week.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiConversionDayoftheweekDateGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiConversionDayoftheweekDateGet(params: ApiConversionDayoftheweekDateGet$Params, context?: HttpContext): Observable<DayOfTheWeekResult> {
    return this.apiConversionDayoftheweekDateGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DayOfTheWeekResult>): DayOfTheWeekResult => r.body)
    );
  }

  /** Path part for operation `apiConversionDayoftheyearDateGet()` */
  static readonly ApiConversionDayoftheyearDateGetPath = '/api/conversion/dayoftheyear/{date}';

  /**
   * Convert a date to the day of the year.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiConversionDayoftheyearDateGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiConversionDayoftheyearDateGet$Response(params: ApiConversionDayoftheyearDateGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiConversionDayoftheyearDateGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Convert a date to the day of the year.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiConversionDayoftheyearDateGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiConversionDayoftheyearDateGet(params: ApiConversionDayoftheyearDateGet$Params, context?: HttpContext): Observable<void> {
    return this.apiConversionDayoftheyearDateGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
