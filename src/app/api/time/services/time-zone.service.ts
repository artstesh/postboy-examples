/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { TimeApiConfiguration } from '../time-api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiTimezoneAvailabletimezonesGet } from '../fn/time-zone/api-timezone-availabletimezones-get';
import { ApiTimezoneAvailabletimezonesGet$Params } from '../fn/time-zone/api-timezone-availabletimezones-get';
import { apiTimezoneCoordinateGet } from '../fn/time-zone/api-timezone-coordinate-get';
import { ApiTimezoneCoordinateGet$Params } from '../fn/time-zone/api-timezone-coordinate-get';
import { apiTimezoneIpGet } from '../fn/time-zone/api-timezone-ip-get';
import { ApiTimezoneIpGet$Params } from '../fn/time-zone/api-timezone-ip-get';
import { apiTimezoneZoneGet } from '../fn/time-zone/api-timezone-zone-get';
import { ApiTimezoneZoneGet$Params } from '../fn/time-zone/api-timezone-zone-get';
import { TimeZoneData } from '../models/time-zone-data';

@Injectable({ providedIn: 'root' })
export class TimeZoneService extends BaseService {
  constructor(config: TimeApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiTimezoneAvailabletimezonesGet()` */
  static readonly ApiTimezoneAvailabletimezonesGetPath = '/api/timezone/availabletimezones';

  /**
   * Gets all the available IANA time zones.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimezoneAvailabletimezonesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneAvailabletimezonesGet$Response(params?: ApiTimezoneAvailabletimezonesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return apiTimezoneAvailabletimezonesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all the available IANA time zones.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimezoneAvailabletimezonesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneAvailabletimezonesGet(params?: ApiTimezoneAvailabletimezonesGet$Params, context?: HttpContext): Observable<Array<string>> {
    return this.apiTimezoneAvailabletimezonesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `apiTimezoneZoneGet()` */
  static readonly ApiTimezoneZoneGetPath = '/api/timezone/zone';

  /**
   * Gets the time zone info by IANA time zone name.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimezoneZoneGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneZoneGet$Response(params?: ApiTimezoneZoneGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TimeZoneData>> {
    return apiTimezoneZoneGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the time zone info by IANA time zone name.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimezoneZoneGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneZoneGet(params?: ApiTimezoneZoneGet$Params, context?: HttpContext): Observable<TimeZoneData> {
    return this.apiTimezoneZoneGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TimeZoneData>): TimeZoneData => r.body)
    );
  }

  /** Path part for operation `apiTimezoneCoordinateGet()` */
  static readonly ApiTimezoneCoordinateGetPath = '/api/timezone/coordinate';

  /**
   * Gets the time zone info of a geo coordinate.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimezoneCoordinateGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneCoordinateGet$Response(params?: ApiTimezoneCoordinateGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TimeZoneData>> {
    return apiTimezoneCoordinateGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the time zone info of a geo coordinate.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimezoneCoordinateGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneCoordinateGet(params?: ApiTimezoneCoordinateGet$Params, context?: HttpContext): Observable<TimeZoneData> {
    return this.apiTimezoneCoordinateGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TimeZoneData>): TimeZoneData => r.body)
    );
  }

  /** Path part for operation `apiTimezoneIpGet()` */
  static readonly ApiTimezoneIpGetPath = '/api/timezone/ip';

  /**
   * Gets the time zone info of an IPv4 address.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTimezoneIpGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneIpGet$Response(params?: ApiTimezoneIpGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TimeZoneData>> {
    return apiTimezoneIpGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the time zone info of an IPv4 address.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTimezoneIpGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTimezoneIpGet(params?: ApiTimezoneIpGet$Params, context?: HttpContext): Observable<TimeZoneData> {
    return this.apiTimezoneIpGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TimeZoneData>): TimeZoneData => r.body)
    );
  }

}
